# -*- coding: utf-8 -*-

"""
verizon

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from verizon.api_helper import APIHelper
from verizon.configuration import Server
from verizon.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from verizon.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from verizon.models.session_level import SessionLevel
from verizon.models.total_level import TotalLevel
from verizon.models.aggregated_report_callback_result import AggregatedReportCallbackResult
from verizon.exceptions.hyper_precise_location_result_exception import HyperPreciseLocationResultException


class DeviceReportsController(BaseController):

    """A Controller to access Endpoints in the verizon API."""
    def __init__(self, config):
        super(DeviceReportsController, self).__init__(config)

    def get_sessions_report(self,
                            account_number,
                            imei,
                            body,
                            start_date=None,
                            end_date=None,
                            duration_low=None,
                            duration_high=None):
        """Does a POST request to /report/sessions.

        Detailed report of session duration and number of bytes transferred
        per day.

        Args:
            account_number (string): The unique identifier for the account
            imei (string): International Mobile Device Identifier. The unique
                identifier of the device.
            body (SessionReportRequest): Session report request example
            start_date (string, optional): Start date of session to include.
                If not specified information will be shown from the earliest
                available (180 days). ISO 8601 format.
            end_date (string, optional): End date of session to include. If
                not specified information will be shown to the latest
                available. ISO 8601 format.
            duration_low (int, optional): The Low value of session duration.
            duration_high (int, optional): The High value of session
                duration.

        Returns:
            SessionLevel: Response from the API. A successful response
                includes the session information for an individual device.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT10)
            .path('/report/sessions')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('accountNumber')
                          .value(account_number))
            .header_param(Parameter()
                          .key('imei')
                          .value(imei))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('startDate')
                          .value(start_date))
            .header_param(Parameter()
                          .key('endDate')
                          .value(end_date))
            .header_param(Parameter()
                          .key('durationLow')
                          .value(duration_low))
            .header_param(Parameter()
                          .key('durationHigh')
                          .value(duration_high))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SessionLevel.from_dictionary)
            .local_error('400', 'Bad request.', HyperPreciseLocationResultException)
            .local_error('401', 'Unauthorized request. Access token is missing or invalid.', HyperPreciseLocationResultException)
            .local_error('403', 'Forbidden request.', HyperPreciseLocationResultException)
            .local_error('404', 'Bad request. Not found.', HyperPreciseLocationResultException)
            .local_error('409', 'Bad request. Conflict state.', HyperPreciseLocationResultException)
            .local_error('500', 'Internal Server Error.', HyperPreciseLocationResultException)
        ).execute()

    def calculate_aggregated_report_synchronous(self,
                                                account_number,
                                                imei,
                                                body,
                                                start_date=None,
                                                end_date=None,
                                                device_group=None,
                                                data_plan=None,
                                                no_session_flag=None):
        """Does a POST request to /report/aggregate.

        Calculate aggregated report per day with number of sessions and usage
        information. User will receive synchronous response for specified list
        of devices (Max 10) and date range (Max 180 days).

        Args:
            account_number (string): The unique identifier for the account
            imei (string): Number of devices returning usage info. Could be 0,
                1 or more. If 0 the query will return all devices belonging to
                customer.
            body (AggregateSessionReportRequest): Aggregated report request
                example
            start_date (string, optional): Start date of session to include.
                If not specified information will be shown from the earliest
                available (180 days). ISO 8601 format.
            end_date (string, optional): End date of session to include. If
                not specified information will be shown to the latest
                available. ISO 8601 format.
            device_group (string, optional): User defined group name the
                devices are a member of.
            data_plan (string, optional): The data plan the devices beign
                queried belong to.
            no_session_flag (string, optional): filters on devices which
                return only "no sessions".

        Returns:
            TotalLevel: Response from the API. A successful response shows
                session and usage details for up to 10 devices.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT10)
            .path('/report/aggregate')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('accountNumber')
                          .value(account_number))
            .header_param(Parameter()
                          .key('imei')
                          .value(imei))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('startDate')
                          .value(start_date))
            .header_param(Parameter()
                          .key('endDate')
                          .value(end_date))
            .header_param(Parameter()
                          .key('deviceGroup')
                          .value(device_group))
            .header_param(Parameter()
                          .key('dataPlan')
                          .value(data_plan))
            .header_param(Parameter()
                          .key('noSessionFlag')
                          .value(no_session_flag))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TotalLevel.from_dictionary)
            .local_error('400', 'Bad request.', HyperPreciseLocationResultException)
            .local_error('401', 'Unauthorized request. Access token is missing or invalid.', HyperPreciseLocationResultException)
            .local_error('403', 'Forbidden request.', HyperPreciseLocationResultException)
            .local_error('404', 'Bad request. Not found.', HyperPreciseLocationResultException)
            .local_error('409', 'Bad request. Conflict state.', HyperPreciseLocationResultException)
            .local_error('500', 'Internal Server Error.', HyperPreciseLocationResultException)
        ).execute()

    def calculate_aggregated_report_asynchronous(self,
                                                 x_portal_initiated,
                                                 account_number,
                                                 imei,
                                                 body,
                                                 start_date=None,
                                                 end_date=None,
                                                 device_group=None,
                                                 data_plan=None,
                                                 no_session_flag=None):
        """Does a POST request to /report/async/aggregate.

        Calculate aggregated report per day with number of sessions and usage
        information. User will receive an asynchronous callback for the
        specified list of devices (Max 10000) and date range (Max 180 days).

        Args:
            x_portal_initiated (bool): A flag for using a listener. Set to
                true or false.
            account_number (string): The unique identifier for the account
            imei (string): Number of devices returning usage info. Could be 0,
                1 or more. If 0 the query will return all devices belonging to
                customer.
            body (AggregateSessionReportRequest): Aggregated report request
                example
            start_date (string, optional): Start date of session to include.
                If not specified information will be shown from the earliest
                available (180 days). ISO 8601 format.
            end_date (string, optional): End date of session to include. If
                not specified information will be shown to the latest
                available. ISO 8601 format.
            device_group (string, optional): User defined group name the
                devices are a member of.
            data_plan (string, optional): The data plan the devices beign
                queried belong to.
            no_session_flag (string, optional): filters on devices which
                return only "no sessions".

        Returns:
            AggregatedReportCallbackResult: Response from the API. A
                successful response shows the request is queued with a unique
                `txid` to identify the report data with.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT10)
            .path('/report/async/aggregate')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('X-Portal-Initiated')
                          .value(x_portal_initiated))
            .header_param(Parameter()
                          .key('accountNumber')
                          .value(account_number))
            .header_param(Parameter()
                          .key('imei')
                          .value(imei))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('startDate')
                          .value(start_date))
            .header_param(Parameter()
                          .key('endDate')
                          .value(end_date))
            .header_param(Parameter()
                          .key('deviceGroup')
                          .value(device_group))
            .header_param(Parameter()
                          .key('dataPlan')
                          .value(data_plan))
            .header_param(Parameter()
                          .key('noSessionFlag')
                          .value(no_session_flag))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AggregatedReportCallbackResult.from_dictionary)
            .local_error('400', 'Bad request.', HyperPreciseLocationResultException)
            .local_error('401', 'Unauthorized request. Access token is missing or invalid.', HyperPreciseLocationResultException)
            .local_error('403', 'Forbidden request.', HyperPreciseLocationResultException)
            .local_error('404', 'Bad request. Not found.', HyperPreciseLocationResultException)
            .local_error('409', 'Bad request. Conflict state.', HyperPreciseLocationResultException)
            .local_error('500', 'Internal Server Error.', HyperPreciseLocationResultException)
        ).execute()
